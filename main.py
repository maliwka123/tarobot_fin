import os
import json
import random
import logging
import asyncio
from datetime import datetime, time as dt_time, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from pathlib import Path
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import DaysTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7348274440:AAGtY3EC0NuA4Y8S5RP-oJLr2fWsG-QGhmM'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç
with open('cards_data.json', 'r', encoding='utf-8') as f:
    tarot_cards = json.load(f)
logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(tarot_cards)} –∫–∞—Ä—Ç")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
user_day_counter = {}  # –°—á—ë—Ç—á–∏–∫ –¥–Ω–µ–π –¥–ª—è —Ä–æ–∞–¥–º–∞–ø–∞

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = 'user_stats.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not Path(STATS_FILE).exists():
    with open(STATS_FILE, 'w') as f:
        json.dump({"all_users": {}, "last_active": {}}, f)

def load_stats():
    try:
        with open(STATS_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"all_users": {}, "last_active": {}}

def save_stats(stats):
    try:
        with open(STATS_FILE, 'w') as f:
            json.dump(stats, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–æ–∞–¥–º–∞–ø–∞
ROADMAP_MESSAGES = {
    0: "‚ú® <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É?</b>\n\n"
       "1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å <b>–≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É-–ø–æ–¥—Å–∫–∞–∑–∫—É</b> ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –µ—â—ë —Ä–∞–∑\n"
       "2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ <b>–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∑–∞—Å—Ç–∞–≤–∫—É</b> –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω\n"
       "3. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ <b>—Å–æ–≤–µ—Ç</b> –ø–æ–¥ –∫–∞—Ä—Ç–æ–π ‚Äî –∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç —É–∂–µ —Ç–∞–º",

    3: "üí´ <b>–ó–∞–º–µ—Ç–∏–ª–∏, –∫–∞–∫ –∫–∞—Ä—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?</b>\n\n"
       "–í –∫–∞–Ω–∞–ª–µ @Taro_Caesar —Ä–∞–∑–±–∏—Ä–∞–µ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚Äî "
       "–≤–æ—Ç –ø—Ä–∏–º–µ—Ä ‚Üí https://t.me/taro_caesar/40",

    6: "üß† <b>–ù–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¢–∞—Ä–æ</b>\n\n"
       "–ù–∞–ø—Ä–∏–º–µ—Ä –ê—Ä–∫–∞–Ω ¬´–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞¬ª –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–ø–æ–ª–Ω–∏—Ç—å—Å—è:\n"
       "‚Äî –¢–µ–ø–ª–æ–º –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å—é\n"
       "‚Äî –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∏ —Å—Ç–∞—Ç–Ω–æ—Å—Ç—å—é\n"
       "‚Äî –°–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –∏–∑–æ–±–∏–ª–∏–µ–º\n\n"
       "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? –°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ ‚Üí "
       "https://www.instagram.com/reel/DLK2zLSCUSf/",

    9: "üåü <b>–í–∞—à –ª–∏—á–Ω—ã–π –∞—Ä–∫–∞–Ω-—Ç–∞–ª–∏—Å–º–∞–Ω</b>\n\n"
       "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –µ–≥–æ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Üí https://inpot.ru/?p=16952\n\n"
       "–ê –≤ @Taro_Caesar ‚Äî –ø—Ä–æ –≤—Å–µ —Ç–∞–ª–∏—Å–º–∞–Ω—ã, –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è",

    12: "üåô <b>–ö–∞–∫–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–æ–∑–≤–∞–ª–∞—Å—å —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ?</b>\n\n"
        "–ò–∑—É—á–∏—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –∫–∞–∫ —Ç–∞–ª–∏—Å–º–∞–Ω—ã ‚Üí http://tarocaesar.tilda.ws\n\n"
        "–í @Taro_Caesar ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–∞—Ä—Ç–∏–Ω –¢–∞—Ä–æ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",

    15: "üéâ <b>15 –¥–Ω–µ–π —Å –¢–∞—Ä–æ ‚Äî –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
        "‚Äî –ó–∞—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "‚Äî –õ–∏—á–Ω—ã–π –∞—Ä–∫–∞–Ω\n"
        "‚Äî –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º\n"
        "‚Äî –ù–µ–π—Ä–æ–≤–∏–∑–∞—É–ª—ã –¥–ª—è –¥–æ–º–∞\n\n"
        "<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º –≥–ª—É–±–∂–µ?</b> –í –∫–∞–Ω–∞–ª–µ:\n"
        "‚Ä¢ –ê—Ä—Ö–µ—Ç–∏–ø—ã –∏ —Ç–∞—Ä–æ–ª–æ–≥-–∑–∞–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–∞—Ä—Ç–∏–Ω—ã –¢–∞—Ä–æ\n"
        "‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å ‚Üí @Taro_Caesar"
}

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
SHOP_MESSAGE = (
    "üåü <b>–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –º–∞–≥–∏—é –¢–∞—Ä–æ –∏ —Ö–æ—Ç–∏—Ç–µ –≥–ª—É–±–∂–µ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –º–∏—Ä?</b>\n\n"
    
    "üÉè <b>–°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã –¥–ª—è –Ω–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n"
    "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ –≤–∞—à–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é. "
    "–°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –≤–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ "
    "–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è.\n\n"
    
    "üé¥ <b>–í–æ–ª—à–µ–±–Ω–∞—è –∫–æ–ª–æ–¥–∞ –≤ –ø–µ—á–∞—Ç–Ω–æ–º –∏–∑–¥–∞–Ω–∏–∏</b>\n"
    "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–∞—à—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∫–æ–ª–æ–¥—É! –†–∞—Å–∫–ª–∞–¥—ã —Å –Ω–µ–π –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è "
    "–≤ –Ω–∞—Å—Ç–æ—è—â–∏–µ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å–∫–∞–∑—ã –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–π –∫—Ä–∞—Å–æ—Ç—ã. "
    "–ö–∞—Ä—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—Å, –¥–µ–ª–∞—è –∫–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ "
    "—É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç –∏–º–µ–Ω–Ω–æ —Å –≤–∞–º–∏.\n\n"
    
    "üí´ –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –≥–ª—É–±–æ–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –¢–∞—Ä–æ ‚Äî "
    "–ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω: https://tarocaesar.tilda.ws"
)

def get_random_card():
    return random.choice(tarot_cards)

async def send_card(user_id: int):
    try:
        card = get_random_card()
        image_path = os.path.join('images', card['image'])
        
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                message = await bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=f"<b>{card['name']}</b>\n\n{card['description']}\n\n<b>–°–æ–≤–µ—Ç:</b> {card['advice']}",
                    parse_mode="HTML"
                )
        else:
            message = await bot.send_message(
                chat_id=user_id,
                text=f"<b>{card['name']}</b>\n\n{card['description']}\n\n<b>–°–æ–≤–µ—Ç:</b> {card['advice']}",
                parse_mode="HTML"
            )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 15-–π –¥–µ–Ω—å
        if user_day_counter.get(user_id, 0) == 15:
            await bot.pin_chat_message(chat_id=user_id, message_id=message.message_id)
            
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

async def send_roadmap_message(user_id: int, day: int):
    if day in ROADMAP_MESSAGES:
        await bot.send_message(
            chat_id=user_id,
            text=ROADMAP_MESSAGES[day],
            parse_mode="HTML",
            disable_web_page_preview=(day != 3)  # –ü—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω—è 3
        )

async def send_shop_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–∞–∑ –≤ 3 –¥–Ω—è"""
    for user_id in list(user_data.keys()):
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            button = KeyboardButton("üõçÔ∏è –ù–∞—à –º–∞–≥–∞–∑–∏–Ω")
            keyboard.add(button)
            
            await bot.send_message(
                chat_id=user_id,
                text=SHOP_MESSAGE,
                parse_mode="HTML",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def scheduled_morning_card():
    while True:
        try:
            now = datetime.now() + timedelta(hours=3)  # MSK (UTC+3)
            if now.time() >= dt_time(10, 0) and now.time() <= dt_time(10, 5):
                for user_id in list(user_data.keys()):
                    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã
                    user_data[user_id]['count'] = 0
                    if await send_card(user_id):
                        user_data[user_id]['count'] += 1
                        user_data[user_id]['last_request'] = now
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–∞–¥–º–∞–ø
                        user_day_counter[user_id] = user_day_counter.get(user_id, 0) + 1
                        await send_roadmap_message(user_id, user_day_counter[user_id])
            await asyncio.sleep(300)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ scheduled_morning_card: {e}")
            await asyncio.sleep(60)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    now = datetime.now() + timedelta(hours=3)  # MSK (UTC+3)
    now_str = now.strftime("%Y-%m-%d %H:%M:%S")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = load_stats()
    if user_id not in stats["all_users"]:
        stats["all_users"][user_id] = now_str
    stats["last_active"][user_id] = now_str
    save_stats(stats)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_card = KeyboardButton("üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
    button_shop = KeyboardButton("üõçÔ∏è –ù–∞—à –º–∞–≥–∞–∑–∏–Ω")
    keyboard.add(button_card, button_shop)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if int(user_id) not in user_data:
        user_data[int(user_id)] = {'count': 0, 'last_request': None}
        user_day_counter[int(user_id)] = 0
    
    data = user_data[int(user_id)]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if data['last_request'] and (now - data['last_request']).days >= 1:
        data['count'] = 0
    
    # –õ–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç
    if data['count'] == 0:
        if await send_card(int(user_id)):
            data['count'] += 1
            data['last_request'] = now
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(ROADMAP_MESSAGES[0], parse_mode="HTML", reply_markup=keyboard)
    elif data['count'] == 1:
        if await send_card(int(user_id)):
            data['count'] += 1
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã
            await message.answer("‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º", reply_markup=keyboard)
    else:
        await message.reply(
            "‚ú® –°–µ–≥–æ–¥–Ω—è –¢–∞—Ä–æ –¥–∞–ª–∏ –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏. "
            "–ê –ø–æ–∫–∞ ‚Äî –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∏—Ä –¢–∞—Ä–æ @Taro_Caesar —É –Ω–∞—Å –º–Ω–æ–≥–æ —á–µ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ, –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.‚ú®",
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É"
@dp.message_handler(lambda message: message.text == "üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
async def handle_card_button(message: types.Message):
    await cmd_start(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üõçÔ∏è –ù–∞—à –º–∞–≥–∞–∑–∏–Ω"
@dp.message_handler(lambda message: message.text == "üõçÔ∏è –ù–∞—à –º–∞–≥–∞–∑–∏–Ω")
async def handle_shop_button(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_card = KeyboardButton("üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
    button_shop = KeyboardButton("üõçÔ∏è –ù–∞—à –º–∞–≥–∞–∑–∏–Ω")
    keyboard.add(button_card, button_shop)
    
    await message.answer(
        SHOP_MESSAGE,
        parse_mode="HTML",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

@dp.message_handler(commands=['peop'])
async def cmd_peop(message: types.Message):
    ADMIN_ID = 227001984  # –í–∞—à ID
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    stats = load_stats()
    now = datetime.now() + timedelta(hours=3)  # MSK (UTC+3)
    week_ago = now - timedelta(days=7)
    
    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
    active_users = 0
    for user_id, last_active_str in stats["last_active"].items():
        try:
            last_active = datetime.strptime(last_active_str, "%Y-%m-%d %H:%M:%S")
            if last_active >= week_ago:
                active_users += 1
        except:
            continue
    
    total_users = len(stats["all_users"])
    
    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{total_users}</code>\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{active_users}</code>\n\n"
        f"<i>–î–∞–Ω–Ω—ã–µ –Ω–∞ {now.strftime('%d.%m.%Y %H:%M')} (MSK)</i>",
        parse_mode="HTML"
    )

def schedule_shop_messages():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è
    scheduler.add_job(
        send_shop_message,
        DaysTrigger(days=3),
        id="shop_message",
        replace_existing=True
    )

async def on_startup(dp):
    asyncio.create_task(scheduled_morning_card())
    schedule_shop_messages()
    scheduler.start()

if __name__ == '__main__':
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
